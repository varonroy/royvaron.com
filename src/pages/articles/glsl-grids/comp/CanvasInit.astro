<script lang="js">
  function init(canvas_id, vertexShaderSource, fragmentShaderSource) {
    var canvas = document.getElementById(canvas_id);
    const gl = canvas.getContext("experimental-webgl");

    var vertices = [-1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0];

    var indices = [0, 1, 2, 2, 3, 0];

    // Create an empty buffer object to store vertex buffer
    var vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);

    // Create an empty buffer object to store Index buffer
    var indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(
      gl.ELEMENT_ARRAY_BUFFER,
      new Uint16Array(indices),
      gl.STATIC_DRAW
    );
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

    // create vertex shader
    var vertShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertShader, vertexShaderSource);
    gl.compileShader(vertShader);
    if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
      console.error(
        "ERROR: compiling vertex shader!",
        gl.getShaderInfoLog(vertShader)
      );
    }

    // create fragment shader
    var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragShader, fragmentShaderSource);
    gl.compileShader(fragShader);
    if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
      console.error(
        "ERROR: compiling fragment shader!",
        gl.getShaderInfoLog(fragShader)
      );
    }

    // create shader program
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertShader);
    gl.attachShader(shaderProgram, fragShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      console.error(
        "ERROR: could not link shader program",
        gl.getProgramInfoLog(shaderProgram)
      );
    }

    // specify uniform
    var uniformLocationS = gl.getUniformLocation(shaderProgram, "s");

    // get viewport size
    var width = canvas.clientWidth;
    var height = canvas.clientHeight;

    // use shader
    gl.useProgram(shaderProgram);

    // bind buffers
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);

    // bind uniform
    gl.uniform2f(uniformLocationS, width, height);

    // specify attributes
    var loc = gl.getAttribLocation(shaderProgram, "p");
    gl.vertexAttribPointer(loc, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(loc);

    // prepare render
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.enable(gl.DEPTH_TEST);
    gl.clear(gl.COLOR_BUFFER_BIT);

    // render
    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
  }
</script>
