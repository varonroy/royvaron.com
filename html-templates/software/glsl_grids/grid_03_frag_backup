precision highp float;

// constants
float COS_30 = sqrt(3.0) / 2.0;

// varying
varying vec2 uv;
varying vec2 screenSize;

// colors
vec3 bgColor = vec3(0.2);
vec3 gridColor1 = vec3(0.8, 0.5, 0.5);
vec3 gridColor2 = vec3(0.8, 0.8, 0.5);
vec3 gridColor3 = vec3(0.8, 0.5, 0.8);
vec3 gridColor4 = vec3(0.8, 0.8, 0.8);

// camera
vec2 cameraPos = vec2(0.0);
float cameraWidth = 1.0;
vec2 cameraSize = vec2(0.0);

// grid
vec2 gridCenter = vec2(0.0);
vec2 gridSize = vec2(3.0);
float hexR = 0.07;
float hexW = COS_30 * hexR;

float inHex(vec2 p) {
	p = abs(p);

	float targetHeight = hexR + (hexR / 2.0 - hexR) / hexW * p.x;

	float underLine = 1.0 - step(targetHeight, p.y);

	return underLine * (1.0 - step(hexW, p.x));
}

float inHexOffset(vec2 p, vec2 offset) {
	p -= offset;
	p = abs(p);

	float targetHeight = hexR + (hexR / 2.0 - hexR) / hexW * p.x;

	float underLine = 1.0 - step(targetHeight, p.y);

	return underLine * (1.0 - step(hexW, p.x));
}

vec3 hexRow(vec2 p, vec3 color1, vec3 color2) {
	p.x = mod(p.x, hexW * 2.0 * 2.0);

	return color1 * inHex(p - vec2(hexW, 0.0)) + 
		color2 * inHex(p - vec2(hexW, 0.0) + vec2(-hexW * 2.0, 0.0));
}

vec3 hexRowOffset(vec2 p, vec2 offset, vec3 color1, vec3 color2) {
	p.x = mod(p.x, hexW * 2.0 * 2.0);

	return color1 * inHexOffset(p - vec2(hexW * 0.0, 0.0), offset) + 
		color2 * inHexOffset(p - vec2(hexW * 0.0, 0.0) + vec2(-hexW * 2.0, 0.0), offset);
}

vec3 hexRowOffsetM(vec2 p, float m, vec2 offset, vec3 color1, vec3 color2) {
	p.x = mod(p.x, hexW * 2.0 * 2.0);

	return color1 * inHexOffset(p - vec2(hexW * m, 0.0), offset) + 
		color2 * inHexOffset(p - vec2(hexW * m, 0.0) + vec2(-hexW * 2.0, 0.0), offset);
}

vec3 hexRowTopPart(vec2 p, vec3 color1, vec3 color2) {
	return hexRow(p, color1, color2) * step(hexR / 2.0, p.y);
}

vec3 hexRowBottomPart(vec2 p, vec3 color1, vec3 color2) {
	p.y *= -1.0;
	return hexRow(p, color1, color2) * step(hexR / 2.0, p.y);
}

vec3 hexDoubleRow(vec2 p, vec3 color1, vec3 color2, vec3 color3, vec3 color4) {
	vec3 top = hexRow(p, color1, color2);
	vec3 bottom = hexRow(p + vec2(hexW, hexR * 1.5), color3, color4);

	return top + bottom;
}

vec3 hexBlock(vec2 p, vec3 color1, vec3 color2, vec3 color3, vec3 color4) {
	return hexDoubleRow(p, color1, color2, color3, color4) + 
		hexRowTopPart(p + vec2(0.0, hexR * 3.0), color1, color2) +
		hexRowBottomPart(p - vec2(hexW, hexR * 1.5), color3, color4);
}


void main(void) {
	// match the camera's aspect ratio to the canvas's
	float cameraHeight = cameraWidth * screenSize.y / screenSize.x;
	cameraSize = vec2(cameraWidth, cameraHeight);

	// transform the uv coordinates to the to the camera's coordinates
	// (cx - cw / 2, cy - ch / 2) to (cx + cw / 2, cy + ch / 2)
	// now, each point on the screen will the the 'world' coordinate
	vec2 p = (uv - 0.5) * cameraSize + cameraPos;

	// check if the point is inside the bounds of the grid from each direction
	vec2 inGridMin = min(vec2(0.0), p - gridCenter - gridSize / 2.0);
	vec2 inGridMax = max(vec2(0.0), p - gridCenter + gridSize / 2.0);

	// check if the point is inside the grid or not
	float inGrid =
		sign(inGridMin.x) * sign(inGridMin.y) *
		sign(inGridMax.x) * sign(inGridMax.y);

	// get the relative position to the corner of the grid
	vec2 pRel = p - (gridCenter - gridSize / 2.0);
	// p.y -= hexR * 2.5;

	p.y = mod(p.y, hexR * 3.0);

	// vec2 pp = vec2(p.x, p.y - hexR * 2.5);

	// pp.y = mod(pp.y, hexR * 5.0);

	vec3 col = 
		hexRowOffsetM(p, 1.0, vec2(0.0, hexR), gridColor1, gridColor2) +
		hexRowOffsetM(p, 0.0, vec2(hexW * 2.0, hexR * 2.0), gridColor3, gridColor4)
		;
	
	col = 
		hexRowOffset(p, vec2(hexW, hexR), gridColor1, gridColor2)
		// hexRowOffset(p - vec2(hexW, hexR * 1.5), vec2(hexW, hexR), gridColor1, gridColor2)
		;
	

	p -= vec2(hexW, hexR * 1.5);
	p.y = mod(p.y, hexR * 3.0);

	col += 
		hexRowOffset(p, vec2(hexW, hexR), gridColor3, gridColor4)
		;
	
	// col = hexRowOffset(p, vec2(hexW, hexR * 2.0), gridColor3, gridColor4);

	// modulate the relative position with twice the cell size and normalize it
	// vec2 pMod = mod(pRel, gridCellSize) / (gridCellSize);

	// output to screen
	gl_FragColor = vec4(col, 1.0);
}
